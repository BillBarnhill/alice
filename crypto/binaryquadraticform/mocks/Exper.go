// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	big "math/big"

	binaryquadraticform "github.com/getamis/alice/crypto/binaryquadraticform"
	mock "github.com/stretchr/testify/mock"
)

// Exper is an autogenerated mock type for the Exper type
type Exper struct {
	mock.Mock
}

// Exp provides a mock function with given fields: power
func (_m *Exper) Exp(power *big.Int) (*binaryquadraticform.BQuadraticForm, error) {
	ret := _m.Called(power)

	var r0 *binaryquadraticform.BQuadraticForm
	var r1 error
	if rf, ok := ret.Get(0).(func(*big.Int) (*binaryquadraticform.BQuadraticForm, error)); ok {
		return rf(power)
	}
	if rf, ok := ret.Get(0).(func(*big.Int) *binaryquadraticform.BQuadraticForm); ok {
		r0 = rf(power)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binaryquadraticform.BQuadraticForm)
		}
	}

	if rf, ok := ret.Get(1).(func(*big.Int) error); ok {
		r1 = rf(power)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToMessage provides a mock function with given fields:
func (_m *Exper) ToMessage() *binaryquadraticform.BQForm {
	ret := _m.Called()

	var r0 *binaryquadraticform.BQForm
	if rf, ok := ret.Get(0).(func() *binaryquadraticform.BQForm); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binaryquadraticform.BQForm)
		}
	}

	return r0
}

type mockConstructorTestingTNewExper interface {
	mock.TestingT
	Cleanup(func())
}

// NewExper creates a new instance of Exper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExper(t mockConstructorTestingTNewExper) *Exper {
	mock := &Exper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
